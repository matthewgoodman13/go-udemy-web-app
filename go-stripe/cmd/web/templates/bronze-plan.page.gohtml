{{ template "base" . }}

{{ define "title" }}
    Bronze Plan
{{ end }}

{{ define "content" }}

{{ $widget := index .Data "widget" }}

    <div class="alert alert-danger text-center d-none" id="card-messages" role="alert"></div>

    <form action="/payment-succeeded" method="post" name="charge_form" id="charge_form" class="d-block needs-validation charge-form" autocomplete="off" novalidate="">

        <input type="hidden" id="product_id" name="product_id" value="{{ $widget.ID }}" />
        <input type="hidden" id="amount" name="amount" value="{{ $widget.Price }}" />

        <h2 class="mt-2 mb-3 text-center">{{ $widget.Name }}</h2>
        <h3 class="mt-1 mb-3 text-center">{{ formatCurrency $widget.Price }}/month</h3>
        <p>{{ $widget.Description }}</p>
        <hr />

        <div class="mb-3">
            <label for="first-name" class="form-label">First Name</label>
            <input type="text" class="form-control" id="first-name" name="first_name" required="" autocomplete="first-name-new">
        </div>

        <div class="mb-3">
            <label for="last-name" class="form-label">Last Name</label>
            <input type="text" class="form-control" id="last-name" name="last_name" required="" autocomplete="last-name-new">
        </div>

        <div class="mb-3">
            <label for="cardholder-email" class="form-label">Email</label>
            <input type="email" class="form-control" id="cardholder-email" name="cardholder_email" required="" autocomplete="cardholder-email-new">
        </div>

        <div class="mb-3">
            <label for="cardholder-name" class="form-label">Name on Card</label>
            <input type="text" class="form-control" id="cardholder-name" name="cardholder_name" required="" autocomplete="cardholder-name-new">
        </div>

        {{/* Card Number built by Stripe */}}
        <div class="mb-3">
            <label for="card-element" class="form-label">Card Number</label>
            <div id="card-element" class="form-control"></div>
            <div class="alert-danger text-center" id="card-errors" role="alert"></div>
            <div class="alert-success text-center" id="card-success" role="alert"></div>
        </div>

        <hr />

        <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onclick="val()">Pay {{ formatCurrency $widget.Price }}/month</a>

        <div class="text-center d-none" id="processing-payment" role="alert">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        <input type="hidden" name="payment_intent" id="payment_intent" />
        <input type="hidden" name="payment_method" id="payment_method" />
        <input type="hidden" name="payment_amount" id="payment_amount" />
        <input type="hidden" name="payment_currency" id="payment_currency" />

    </form>

{{ end }}

{{ define "js" }}
    {{ $widget := index .Data "widget" }}

    <script src="https://js.stripe.com/v3/"></script>

    <script>
        let card;
        const stripe = Stripe({{ .StripePublishableKey }});
        const cardMessages = document.getElementById('card-messages');
        const payButton = document.getElementById('pay-button');
        const processing = document.getElementById('processing-payment');


        function hidePayButton() {
            payButton.classList.add('d-none');
            processing.classList.remove('d-none');
        }

        function showPayButtons() {
            payButton.classList.remove('d-none');
            processing.classList.add('d-none');
        }

        function showCardError(message) {
            cardMessages.classList.add('alert-danger');
            cardMessages.classList.remove('d-none');
            cardMessages.classList.remove('alert-success');
            cardMessages.innerHTML = message;
        }

        function showCardSuccess() {
            cardMessages.classList.add('alert-success');
            cardMessages.classList.remove('d-none');
            cardMessages.classList.remove('alert-danger');
            cardMessages.innerHTML = 'Card successfully charged';
        }


        function val() {
            let form = document.getElementById('charge_form');
            if (form.checkValidity() === false) {
                this.event.preventDefault();
                this.event.stopPropagation();
                form.classList.add('was-validated');
                return;
            }
            form.classList.add('was-validated');
            hidePayButton();

            let amountToCharge = document.getElementById('amount').value;

            stripe.createPaymentMethod({
                type: 'card',
                card: card,
                billing_details: {
                    name: document.getElementById('cardholder-name').value,
                    email: document.getElementById('cardholder-email').value,
                }
            }).then(stripePaymentMethodHandler);
        }

        function stripePaymentMethodHandler(result) {
            if (result.error) {
                showPayButtons();
                showCardError(result.error.message);
            } else {
                // Create Customer and Subscribe to Plan

                let payload = {
                    product_id: document.getElementById('product_id').value,
                    plan: "{{ $widget.PlanID }}",
                    payment_method: result.paymentMethod.id,
                    email: document.getElementById('cardholder-email').value,
                    last_four: result.paymentMethod.card.last4,
                    card_brand: result.paymentMethod.card.brand,
                    expiry_month: result.paymentMethod.card.exp_month,
                    expiry_year: result.paymentMethod.card.exp_year,
                    first_name: document.getElementById('first-name').value,
                    last_name: document.getElementById('last-name').value,
                    amount: document.getElementById('amount').value,
                }

                const requestOptions = {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(payload)
                };

                fetch('{{.API}}/api/create-customer-and-subscribe-to-plan', requestOptions)
                    .then(response => response.json())
                    .then(data => {
                        processing.classList.add('d-none');
                        showCardSuccess();

                        sessionStorage.first_name = document.getElementById('first-name').value;
                        sessionStorage.last_name = document.getElementById('last-name').value;
                        sessionStorage.amount = "{{ formatCurrency $widget.Price }}";
                        sessionStorage.last_four = result.paymentMethod.card.last4;

                        location.href = "/receipt/bronze";

                    });

            }
        }

        (function() {
            // Create stripe client & elements
            const elements = stripe.elements();
            const style = {
                base: {
                    color: '#32325d',
                    fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                    fontSmoothing: 'antialiased',
                    fontSize: '16px',
                    '::placeholder': {
                        color: '#aab7c4'
                    },
                    lineHeight: '24px'
                },
                invalid: {
                    color: '#fa755a',
                    iconColor: '#fa755a'
                }
            };

            card = elements.create('card', {
                style: style,
                hidePostalCode: true,
            });
            card.mount('#card-element');

            card.addEventListener('change', function(event) {
                const displayError = document.getElementById('card-errors');
                if (event.error) {
                    displayError.textContent = event.error.message;
                    displayError.classList.remove('d-none');
                } else {
                    displayError.textContent = '';
                    displayError.classList.add('d-none');
                }
            });

            const form = document.getElementById('charge_form');
            form.addEventListener('submit', function(event) {
                event.preventDefault();

                stripe.createToken(card).then(function(result) {
                    if (result.error) {
                        // Inform the user if there was an error.
                        const errorElement = document.getElementById('card-errors');
                        errorElement.textContent = result.error.message;
                    } else {
                        // Send the token to your server.
                        stripeTokenHandler(result.token);
                    }
                });
            });
        })();

    </script>


{{ end }}