{{ template "base" . }}

{{ define "title"  }}
    Virtual Terminal
{{ end }}

{{ define "content" }}
    <h2 class="mt-3 text-center">Virtual Terminal</h2>
    <hr />

    <div class="alert alert-danger text-center d-none" id="card-messages" role="alert"></div>

    {{/* OLD <form action="/virtual-terminal-payment-succeeded" method="post" name="charge_form" id="charge_form" class="d-block needs-validation charge-form" autocomplete="off" novalidate=""> */}}
    <form action="" method="post" name="charge_form" id="charge_form" class="d-block needs-validation charge-form" autocomplete="off" novalidate="">

        <div class="mb-3">
            <label for="charge_amount" class="form-label">Amount</label>
            <input type="text" class="form-control" id="charge_amount" required="" autocomplete="charge_amount-new">
        </div>

        <div class="mb-3">
            <label for="cardholder-name" class="form-label">Cardholder Name</label>
            <input type="text" class="form-control" id="cardholder-name" name="cardholder_name" required="" autocomplete="cardholder-name-new">
        </div>

        <div class="mb-3">
            <label for="cardholder-email" class="form-label">Cardholder Email</label>
            <input type="email" class="form-control" id="cardholder-email" name="cardholder_email" required="" autocomplete="cardholder-email-new">
        </div>

        {{/* Card Number built by Stripe */}}
        <div class="mb-3">
            <label for="card-element" class="form-label">Card Number</label>
            <div id="card-element" class="form-control"></div>
            <div class="alert-danger text-center" id="card-errors" role="alert"></div>
            <div class="alert-success text-center" id="card-success" role="alert"></div>
        </div>

        <hr />

        <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onclick="val()">Charge Card</a>

        <div class="text-center d-none" id="processing-payment" role="alert">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        <input type="hidden" name="amount" id="amount" />
        <input type="hidden" name="payment_intent" id="payment_intent" />
        <input type="hidden" name="payment_method" id="payment_method" />
        <input type="hidden" name="payment_amount" id="payment_amount" />
        <input type="hidden" name="payment_currency" id="payment_currency" />

    </form>

    <div class="row">
        <div class="col-md-6 offset-md-3 d-none" id="receipt">
            <h3 class="text-center">Receipt</h3>
            <hr />
            <p>
                <strong>Bank Return Code:</strong> <span id="bank-return-code"></span>
            </p>
            <p>
                <a class="btn btn-primary" href="/admin/virtual-terminal">New Transaction</a>
            </p>
        </div>
    </div>

{{ end }}

{{ define "js" }}

    <script>
        // PUT IN HEADER PART OF PAGE IF USING THIS APPROACH
        checkAuth();

        // Add event listener that updates hidden amount input field when charge amount is changed
        document.getElementById("charge_amount").addEventListener("keyup", function(e) {
            document.getElementById("amount").value = (e.target.value !== "") ? parseInt(e.target.value * 100, 10) : 0;
            console.log(document.getElementById("amount").value);
        });
    </script>

    {{/* OLD {{ template "stripe-js" . }} */}}



    <script src="https://js.stripe.com/v3/"></script>
    <script>
        let card;
        const stripe = Stripe({{ .StripePublishableKey }});
        const cardMessages = document.getElementById('card-messages');
        const payButton = document.getElementById('pay-button');
        const processing = document.getElementById('processing-payment');


        function hidePayButton() {
            payButton.classList.add('d-none');
            processing.classList.remove('d-none');
        }

        function showPayButtons() {
            payButton.classList.remove('d-none');
            processing.classList.add('d-none');
        }

        function showCardError(message) {
            cardMessages.classList.add('alert-danger');
            cardMessages.classList.remove('d-none');
            cardMessages.classList.remove('alert-success');
            cardMessages.innerHTML = message;
        }

        function showCardSuccess() {
            cardMessages.classList.add('alert-success');
            cardMessages.classList.remove('d-none');
            cardMessages.classList.remove('alert-danger');
            cardMessages.innerHTML = 'Card successfully charged';
        }

        function val() {
            let form = document.getElementById('charge_form');
            if (form.checkValidity() === false) {
                this.event.preventDefault();
                this.event.stopPropagation();
                form.classList.add('was-validated');
                return;
            }
            form.classList.add('was-validated');
            hidePayButton();

            let amountToCharge = document.getElementById('amount').value;

            let payload = {
                amount: amountToCharge,
                currency: 'cad',
            };

            const requestOptions = {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload),
            };

            // Fetch to api
            fetch("{{.API}}/api/payment-intent", requestOptions)
                .then(response => response.text())
                .then(response => {
                    let data;
                    try {
                        data = JSON.parse(response);
                        stripe.confirmCardPayment(data.client_secret, {
                            payment_method: {
                                card: card,
                                billing_details: {
                                    name: document.getElementById('cardholder-name').value,
                                    email: document.getElementById('cardholder-email').value,
                                }
                            }                            
                        }).then((result) => {
                            if (result.error) {
                                // card declined or something wrong with the card
                                showCardError(result.error.message)
                                showPayButtons();
                            } else if (result.paymentIntent) {
                                if (result.paymentIntent.status === 'succeeded') {
                                    // payment succeeded and card charged
                                    showCardSuccess('Payment succeeded');

                                    processing.classList.add('d-none');
                                    showCardSuccess();
                                    
                                    saveTransaction(result);

                                } else {
                                    // payment failed
                                    showCardError('Invalid response from payment gateway');
                                    showPayButtons();
                                }
                            }
                        })
                    } catch (e) {
                        console.log(e);
                        return;
                    }
                })

        }

        function saveTransaction(result) {
            let payload = {
                payment_intent: result.paymentIntent.id,
                payment_method: result.paymentIntent.payment_method,
                amount: parseInt(document.getElementById('amount').value, 10),
                currency: result.paymentIntent.currency,
                first_name: "",
                last_name: "",
                email: document.getElementById('cardholder-email').value,
            };

            let token = localStorage.getItem('token');

            const requestOptions = {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + token,
                },
                body: JSON.stringify(payload),
            };

            // Fetch to api
            fetch("{{.API}}/api/admin/virtual-terminal-succeeded", requestOptions)
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    processing.classList.add('d-none');
                    showCardSuccess();
                    document.getElementById("bank-return-code").innerHTML = data.bank_return_code;
                    document.getElementById("receipt").classList.remove('d-none');
                })
        }

        (function() {
            // Create stripe client & elements
            const elements = stripe.elements();
            const style = {
                base: {
                    color: '#32325d',
                    fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                    fontSmoothing: 'antialiased',
                    fontSize: '16px',
                    '::placeholder': {
                        color: '#aab7c4'
                    },
                    lineHeight: '24px'
                },
                invalid: {
                    color: '#fa755a',
                    iconColor: '#fa755a'
                }
            };

            card = elements.create('card', {
                style: style,
                hidePostalCode: true,
            });
            card.mount('#card-element');

            card.addEventListener('change', function(event) {
                const displayError = document.getElementById('card-errors');
                if (event.error) {
                    displayError.textContent = event.error.message;
                    displayError.classList.remove('d-none');
                } else {
                    displayError.textContent = '';
                    displayError.classList.add('d-none');
                }
            });

        })();

    </script>

{{ end }}